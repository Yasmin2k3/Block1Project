Index: project/CPU.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\n\npublic class CPU{\n    public int cores;\n    public int sockets;\n    cpuInfo cpu;\n\n    public CPU(cpuInfo cpu){\n        this.cpu = cpu;\n        this.cores = cpu.coresPerSocket();\n        this.sockets = cpu.socketCount();\n    }\n\n    //model name of the cpu\n    public String getCPUModel(){\n        return cpu.getModel();\n    }\n\n    //returns the percentage of time a given core spends being not idle\n    private float loadPercent(int core){\n        int[] vals = getCoreStats(core);\n\n        int totalLoad = vals[0] + vals[1] + vals[2];\n        int busyLoad = vals[1] + vals[2];\n\n        return ((float)busyLoad/totalLoad) * 100;\n    }\n\n    //returns percentage of the total load of a socket\n    private float totalSocketLoad(){\n        int[][] coreLoads = getSocketLoadArray();\n        int totalLoad = 0;\n        int busyLoad = 0;\n\n        //loops through each core and\n        // //adds up how much being time is spent in total and while not in idle\n        for(int[] row: coreLoads){\n            totalLoad += row[0] + row[1] + row[2];\n            busyLoad += row[1] + row[2];\n        }\n\n        return ((float)busyLoad/totalLoad) * 100;\n    }\n\n    private int[][] getSocketLoadArray(){\n        //Contains value for the idle, system and user state for each core\n        //Looks like: [(core 1)[idle, user, system],\n        //            (core 2))[idle, user, system]] and so on\n        int[][] coreLoads = new int[cores][3];\n\n        for (int i=0; i<cores; i++){\n            coreLoads[0] = getCoreStats(i);\n        }\n\n        return coreLoads;\n    }\n\n    //shows the load of a specified core\n    public void buildLoadValues(int type){\n        //temporary timer\n        int count = 0;\n        int core = 0; //change to be mutable\n\n        List<Integer> chartValues = new ArrayList<Integer>();\n\n        //temporary amount of time\n        while (count <10){\n            float val = loadPercent(core);\n\n            if(chartValues.size() == 5){\n                chartValues.removeFirst();\n            }\n\n            //originally a float, rounded to be an int\n            chartValues.add(Math.round(val));\n            count++;\n        }\n    }\n\n    private int[] getCoreStats(int core){\n        cpu.read(1);\n\n        //gets Idle time, User time and system Time\n        int[] coreTimes = {cpu.getIdleTime(core),\n                cpu.getUserTime(core),\n                cpu.getSystemTime(core)};\n\n        return coreTimes;\n    }\n\n    \n    //CACHE STUFF\n\n    //gets all types of cache and puts it into a key/value storage\n    public HashMap<String, Integer> getAllCache(){\n        HashMap<String, Integer> caches = new HashMap<String, Integer>();\n        String str;\n\n        for (int core=0; core<cores; core++){\n            str = \"core \"+ Integer.toString(core) + \" l1d cache\";\n            caches.put(str, cpu.l1dCacheSize());\n            str = \"core \"+ core + \" l1i cache\";\n            caches.put(str, cpu.l1iCacheSize());\n        }\n        caches.put(\"l2 cache: \", cpu.l2CacheSize());\n        caches.put(\"l3 cache: \", cpu.l3CacheSize());\n\n        return caches;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project/CPU.java b/project/CPU.java
--- a/project/CPU.java	(revision fc3e584feba7438dcc666f8d2a5e685bf74b6ac1)
+++ b/project/CPU.java	(date 1729914611470)
@@ -95,6 +95,7 @@
 
     //gets all types of cache and puts it into a key/value storage
     public HashMap<String, Integer> getAllCache(){
+        //make 2d for cores (core1: l1i, l1d...)
         HashMap<String, Integer> caches = new HashMap<String, Integer>();
         String str;
 
Index: project/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        System.loadLibrary(\"sysinfo\");\n\n        cpuInfo cpu = new cpuInfo();\n        cpu.read(0);\n        String name = cpu.getModel();\n\n        CPU help = new CPU(cpu);\n\n        System.out.println(\"core 1\");\n\n        //help.getAllCache();\n\n        SwingUtilities.invokeLater(() -> {\n            CPUPage example = new CPUPage(\"Line Chart Example\");\n            example.setSize(800, 600);\n            example.setLocationRelativeTo(null);\n            example.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n            example.setVisible(true);\n        });\n\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project/Main.java b/project/Main.java
--- a/project/Main.java	(revision fc3e584feba7438dcc666f8d2a5e685bf74b6ac1)
+++ b/project/Main.java	(date 1729964149165)
@@ -16,7 +16,7 @@
         //help.getAllCache();
 
         SwingUtilities.invokeLater(() -> {
-            CPUPage example = new CPUPage("Line Chart Example");
+            CPUCachePage example = new CPUCachePage("Line Chart Example");
             example.setSize(800, 600);
             example.setLocationRelativeTo(null);
             example.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
